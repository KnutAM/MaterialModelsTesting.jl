var documenterSearchIndex = {"docs":
[{"location":"#MaterialModelsTesting","page":"Home","title":"MaterialModelsTesting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MaterialModelsTesting.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#MaterialModelsTesting.obtain_numerical_material_derivative!-Tuple{MaterialModelsBase.MaterialDerivatives, MaterialModelsBase.AbstractMaterial, Any, Any, Any}","page":"Home","title":"MaterialModelsTesting.obtain_numerical_material_derivative!","text":"obtain_numerical_material_derivative!(deriv, m, ϵ, old, Δt; fdtype = Val{:forward}, kwargs...)\n\nObtain the numerical derivative of the material m at the strain ϵ and old state variables, old, for a time step Δt. fdtype and kwargs... are passed to FiniteDiff.finite_difference_jacobian. \n\n\n\n\n\n","category":"method"},{"location":"#MaterialModelsTesting.obtain_numerical_material_derivative!-Tuple{MaterialModelsBase.StressStateDerivatives, MaterialModelsBase.AbstractStressState, MaterialModelsBase.AbstractMaterial, Any, Any, Any}","page":"Home","title":"MaterialModelsTesting.obtain_numerical_material_derivative!","text":"obtain_numerical_material_derivative!(ssd, stress_state, m, ϵ, old, Δt; fdtype = Val{:forward}, kwargs...)\n\nObtain the numerical derivative of the material m considering the stress_state iterations at the strain  ϵ and old state variables, old, for a time step Δt. fdtype and kwargs... are passed to FiniteDiff.finite_difference_jacobian. \n\n\n\n\n\n","category":"method"},{"location":"#MaterialModelsTesting.runstrain-Tuple{Any, Union{Number, Tensors.AbstractTensor}, Any, Any, Any}","page":"Home","title":"MaterialModelsTesting.runstrain","text":"runstrain(m, ϵ_end::Union{Number, AbstractTensor}, ij::NTuple{2, Int}, t_end, num_steps)\n\nSimulate fully strain-controlled loading from zero to ϵ_end strain, and return σ[i,j].  If ϵ_end::Number is passed, loading is applied to the strain ϵ_end eᵢ⊗eⱼ. \n\nReturns the vector of stresses as well as the final state. \n\n\n\n\n\n","category":"method"},{"location":"#MaterialModelsTesting.runstrain_diff-Tuple{Any, Union{Number, Tensors.AbstractTensor}, Any, Any, Any}","page":"Home","title":"MaterialModelsTesting.runstrain_diff","text":"runstrain_diff(m, ϵ_end::Union{Number, AbstractTensor}, ij::NTuple{2, Int}, t_end, num_steps)\n\nSimulate fully strain-controlled loading from zero to ϵ_end strain, and return σ[i,j] and its derivatives wrt. to the material parameters. If ϵ_end::Number is passed, loading is applied to the strain ϵ_end eᵢ⊗eⱼ. \n\nReturns the vector of stresses, the final state, the derivatives dσᵢⱼ/dp for all time steps, and the final  derivatives diff::MaterialDerivatives. \n\n\n\n\n\n","category":"method"},{"location":"#MaterialModelsTesting.runstresstate-Tuple{Any, Any, Union{Number, Tensors.AbstractTensor}, Any, Any, Any}","page":"Home","title":"MaterialModelsTesting.runstresstate","text":"runstresstate(stress_state, m, ϵ_end::Union{Number, AbstractTensor}, ij::NTuple{2, Int}, t_end, num_steps)\n\nSimulate the stress_state from zero to ϵ_end strain, and return σ[i,j]. If ϵ_end::Number is passed, loading is applied to the strain ϵ_end eᵢ⊗eⱼ. \n\nReturns the vector of stresses and the final state variables.\n\n\n\n\n\n","category":"method"},{"location":"#MaterialModelsTesting.runstresstate_diff-Tuple{Any, Any, Union{Number, Tensors.AbstractTensor}, Any, Any, Any}","page":"Home","title":"MaterialModelsTesting.runstresstate_diff","text":"runstresstate_diff(stress_state, m, ϵ_end::Union{Number, AbstractTensor}, ij::NTuple{2, Int}, t_end, num_steps)\n\nSimulate the stress_state from zero to ϵ_end strain, and return σ[i,j] and its derivatives wrt. to the material parameters. If ϵ_end::Number is passed, loading is applied to the strain ϵ_end eᵢ⊗eⱼ. \n\nReturns the vector of stresses, the final state, the derivatives dσᵢⱼ/dp for all time steps, and the final  derivatives diff::StressStateDerivatives.\n\n\n\n\n\n","category":"method"},{"location":"#MaterialModelsTesting.test_derivative-NTuple{4, Any}","page":"Home","title":"MaterialModelsTesting.test_derivative","text":"test_derivative(m, ϵ, state, Δt; comparesettings = (), numdiffsettings = (), diff = MaterialDerivatives(m))\n\nThis function is used to compare the analytically implemented derivative (calling differentiate_material!(diff, m, ϵ, args...)) with the result from obtain_numerical_material_derivative!(diff, m, ϵ, args...; numdiffsettings...).\n\ndiff::MaterialDerivatives can be passed to check that the old value of diff.dsdp is correctly accounted for.\ncomparesettings::NamedTuple are passed as kwargs to Base.isapprox, which compares the two matrices. Please see its docstring for further details.\nnumdiffsettings::NamedTuple are passed as kwargs to obtain_numerical_material_derivative!, please see its docstring for further details. \n\n\n\n\n\n","category":"method"}]
}
